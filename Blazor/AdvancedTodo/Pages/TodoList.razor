@page "/Todos"
@using AdvancedTodo.Data
@using AdvancedTodo.Models
@inject ITodosService TodosService

<h1>Todo list</h1>
<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => Filter(arg))" style="width:50px"/>
</p>
@if (todosToShow == null) {
    <p>
        <em>Loading...</em>
    </p>
} else if (!todosToShow.Any()) {
    <p>
        <em>No ToDo items exist. Please add some.</em>
    </p>
} else {
    <table class="table">
        <thead>
        <tr>
            <th>User ID</th>
            <th>Todo ID</th>
            <th>Title</th>
            <th>Completed?</th>
            <th>Remove</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in todosToShow) {
            <tr>
                <td>@item.UserId</td>
                <td>@item.TodoId</td>
                <td>@item.Title</td>
                <td>
                    <input type="checkbox" checked=@item.IsCompleted @onchange="@((arg) => CompletedChange(arg,item))"/>
                </td>
                <td>
                    <button @onclick="@(() => RemoveTodo(item.TodoId))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Todo> todosToShow;
    private IList<Todo> allTodos;

    private void Filter(ChangeEventArgs changeEventArgs) {
        int? filterById = null;
        try {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        } catch (Exception e) {
            
        }
        if (filterById != null) {
            todosToShow = allTodos.Where(t => t.UserId == filterById).ToList();
        } else {
            todosToShow = allTodos;
        }
    }

    protected override async Task OnInitializedAsync() {
        allTodos = TodosService.GetTodos();
        todosToShow = allTodos;
    }

    private void RemoveTodo(int todoId) {
        Todo todoToRemove = todosToShow.First(t => t.TodoId == todoId);
        TodosService.RemoveTodo(todoId);
        todosToShow.Remove(todoToRemove);
    }

    private void CompletedChange(ChangeEventArgs evt, Todo todo) {
        todo.IsCompleted=(bool)evt.Value;
        TodosService.Update(todo);
    }

}